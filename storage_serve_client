from flask import Flask, send_from_directory, request
from werkzeug.utils import secure_filename
import os
import shutil
import json

app = Flask(__name__)

@app.route('/init', methods=['POST'])
def init():
	if 'Name' not in request.headers:
		return 'Wrong parameters\n'
	try:	
		os.mkdir('files/{0}'.format(request.headers['Name']), 0o553)
	except:
		return 'User already exists\n'
	return 'Success\n'

@app.route('/read/<path:path>', methods=['GET'])
def read(path):
	if '../' in path:
		return 'Forbidden path\n'
	return send_from_directory(
		'files/{0}/'.format(request.headers['Name']), 
		path, as_attachment=True)

@app.route('/write/<path:path>', methods=['POST'])
def write(path):
	if '../' in path:
		return 'Forbidden path\n'
	if 'Name' not in request.headers:
		return 'Wrong parameters\n'
	if 'file' not in request.files:
		return 'File is not provided'
	f = request.files['file']
	if f.filename == '':
		return 'File is not provided'
	full_path = 'files/{0}/{1}'.format(request.headers['Name'], path)
	try:
		f.save(full_path)
	except:
		return 'Directory does not exist\n'
	return 'Success\n'

@app.route('/delete/<path:path>', methods=['POST'])
def delete(path):
	if '../' in path:
		return 'Forbidden path\n'
	if 'Name' not in request.headers:
		return 'Wrong parameters\n'
	full_path = 'files/{0}/{1}'.format(request.headers['Name'], path)
	try:
		os.remove(full_path)
	except:
		return 'File does not exist\n'
	return 'Success\n'

@app.route('/mkdir/<path:path>', methods=['POST'])
def mkdir(path):
	if '../' in path:
		return 'Forbidden path\n'
	if 'Name' not in request.headers:
		return 'Wrong parameters\n'
	full_path = 'files/{0}/{1}'.format(request.headers['Name'], path)
	try:
		os.mkdir(full_path, 0o553)
	except FileExistsError:
		return 'Directory already exists\n'
	return 'Success\n'

@app.route('/lsdir/<path:path>', methods=['GET'])
def listdir(path):
	if '../' in path:
		return 'Forbidden path\n'
	if 'Name' not in request.headers:
		return 'Wrong parameters\n'
	full_path = 'files/{0}/{1}'.format(request.headers['Name'], path)
	d = []
	try:
		ls = os.scandir(full_path)
		for item in ls:
			c = {}
			c['dir'] = item.is_dir()
			c['name'] = item.name
			d.append(c)
	except:
		return 'Directory does not exist\n'
	return json.dumps(d)

@app.route('/rmdir/<path:path>', methods=['POST'])
def rmdir(path):
	if '../' in path:
		return 'Forbidden path\n'
	if 'Name' not in request.headers:
		return 'Wrong parameters\n'
	full_path = 'files/{0}/{1}'.format(request.headers['Name'], path)
	try:
		shutil.rmtree(full_path)
	except:
		return 'Directory does not exist\n'
	return 'Success\n'


